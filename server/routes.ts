import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertRegistrationSchema } from "@shared/schema";
import { z } from "zod";

export async function registerRoutes(app: Express): Promise<Server> {
  // Registration endpoint
  app.post("/api/registrations", async (req, res) => {
    try {
      const validatedData = insertRegistrationSchema.parse(req.body);
      
      const registration = await storage.createRegistration(validatedData);
      
      // Here you would integrate with Google Sheets
      // For now, we'll simulate the Google Sheets integration
      try {
        await sendToGoogleSheets(registration);
      } catch (error) {
        console.error("Failed to send to Google Sheets:", error);
        // Continue execution even if Google Sheets fails
      }
      
      res.json({ 
        success: true, 
        message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.",
        data: registration 
      });
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ 
          success: false, 
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", 
          errors: error.errors 
        });
      } else {
        res.status(500).json({ 
          success: false, 
          message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau" 
        });
      }
    }
  });

  // Get all registrations (for admin)
  app.get("/api/registrations", async (req, res) => {
    try {
      const registrations = await storage.getAllRegistrations();
      res.json({ success: true, data: registrations });
    } catch (error) {
      res.status(500).json({ 
        success: false, 
        message: "L·ªói khi l·∫•y d·ªØ li·ªáu ƒëƒÉng k√Ω" 
      });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}

// Function to send data to Google Sheets
async function sendToGoogleSheets(registration: any) {
  const GOOGLE_SHEETS_URL = process.env.GOOGLE_SHEETS_WEBHOOK_URL || "";
  
  console.log("üîç Debug Google Sheets URL:", GOOGLE_SHEETS_URL);
  
  if (!GOOGLE_SHEETS_URL) {
    console.log("‚ö†Ô∏è Google Sheets ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. ƒê·ªÉ k√≠ch ho·∫°t Google Sheets:");
    console.log("1. T·∫°o Google Apps Script v·ªõi code webhook");
    console.log("2. Deploy v√† l·∫•y URL");
    console.log("3. C·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_SHEETS_WEBHOOK_URL");
    console.log("üìã D·ªØ li·ªáu ƒëƒÉng k√Ω v·∫´n ƒë∆∞·ª£c l∆∞u trong h·ªá th·ªëng:", {
      fullName: registration.fullName,
      phone: registration.phone,
      email: registration.email,
      coursePackage: registration.coursePackage,
      timestamp: registration.createdAt.toISOString()
    });
    return;
  }

  try {
    const response = await fetch(GOOGLE_SHEETS_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        fullName: registration.fullName,
        phone: registration.phone,
        email: registration.email,
        coursePackage: registration.coursePackage,
        experience: registration.experience || '',
        message: registration.message || '',
        timestamp: registration.createdAt.toISOString(),
      }),
    });

    const responseText = await response.text();
    console.log("üìù Google Sheets response:", responseText);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}, response: ${responseText}`);
    }

    try {
      const responseData = JSON.parse(responseText);
      if (responseData.success) {
        console.log("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi Google Sheets");
      } else {
        console.error("‚ùå Google Sheets tr·∫£ v·ªÅ l·ªói:", responseData.error || responseData.message);
      }
    } catch (parseError) {
      console.log("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi Google Sheets (response kh√¥ng ph·∫£i JSON)");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi g·ª≠i t·ªõi Google Sheets:", error);
    throw error;
  }
}
